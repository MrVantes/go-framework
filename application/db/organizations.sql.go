// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organizations.sql

package db

import (
	"context"
)

const CountOrganizations = `-- name: CountOrganizations :one
SELECT COUNT(*) as total FROM organizations
`

func (q *Queries) CountOrganizations(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountOrganizations)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const CreateOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (
  organization_name,
  organization_description
) VALUES (
  $1, $2
)
RETURNING organization_id, organization_name, organization_description, created_at, updated_at
`

type CreateOrganizationParams struct {
	OrganizationName        string `db:"organization_name" json:"organization_name"`
	OrganizationDescription string `db:"organization_description" json:"organization_description"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg *CreateOrganizationParams) (*Organization, error) {
	row := q.db.QueryRow(ctx, CreateOrganization, arg.OrganizationName, arg.OrganizationDescription)
	var i Organization
	err := row.Scan(
		&i.OrganizationID,
		&i.OrganizationName,
		&i.OrganizationDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations
WHERE organization_id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, organizationID int32) error {
	_, err := q.db.Exec(ctx, DeleteOrganization, organizationID)
	return err
}

const GetOrganization = `-- name: GetOrganization :one
SELECT organization_id, organization_name, organization_description, created_at, updated_at FROM organizations
WHERE organization_id = $1 LIMIT 1
`

func (q *Queries) GetOrganization(ctx context.Context, organizationID int32) (*Organization, error) {
	row := q.db.QueryRow(ctx, GetOrganization, organizationID)
	var i Organization
	err := row.Scan(
		&i.OrganizationID,
		&i.OrganizationName,
		&i.OrganizationDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetOrganizationByName = `-- name: GetOrganizationByName :one
SELECT organization_id, organization_name, organization_description, created_at, updated_at FROM organizations
WHERE organization_name = $1 LIMIT 1
`

func (q *Queries) GetOrganizationByName(ctx context.Context, organizationName string) (*Organization, error) {
	row := q.db.QueryRow(ctx, GetOrganizationByName, organizationName)
	var i Organization
	err := row.Scan(
		&i.OrganizationID,
		&i.OrganizationName,
		&i.OrganizationDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const ListOrganizations = `-- name: ListOrganizations :many
SELECT organization_id, organization_name, organization_description, created_at, updated_at FROM organizations
ORDER BY organization_name
LIMIT $2 OFFSET $1
`

type ListOrganizationsParams struct {
	Offset int32 `db:"offset" json:"offset"`
	Limit  int32 `db:"limit" json:"limit"`
}

func (q *Queries) ListOrganizations(ctx context.Context, arg *ListOrganizationsParams) ([]*Organization, error) {
	rows, err := q.db.Query(ctx, ListOrganizations, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Organization{}
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.OrganizationID,
			&i.OrganizationName,
			&i.OrganizationDescription,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateOrganization = `-- name: UpdateOrganization :exec
UPDATE organizations
SET
  organization_name = $1,
  organization_description = $2,
  updated_at = NOW()
WHERE organization_id = $3
RETURNING organization_id, organization_name, organization_description, created_at, updated_at
`

type UpdateOrganizationParams struct {
	OrganizationName        string `db:"organization_name" json:"organization_name"`
	OrganizationDescription string `db:"organization_description" json:"organization_description"`
	OrganizationID          int32  `db:"organization_id" json:"organization_id"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg *UpdateOrganizationParams) error {
	_, err := q.db.Exec(ctx, UpdateOrganization, arg.OrganizationName, arg.OrganizationDescription, arg.OrganizationID)
	return err
}
