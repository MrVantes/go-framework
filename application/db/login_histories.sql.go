// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: login_histories.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateLoginHistory = `-- name: CreateLoginHistory :exec
INSERT INTO login_histories (
  user_id,
  username,
  login_time,
  login_status
) VALUES (
  $1, $2, $3, $4
)
`

type CreateLoginHistoryParams struct {
	UserID      pgtype.Int4        `db:"user_id" json:"user_id"`
	Username    pgtype.Text        `db:"username" json:"username"`
	LoginTime   pgtype.Timestamptz `db:"login_time" json:"login_time"`
	LoginStatus pgtype.Bool        `db:"login_status" json:"login_status"`
}

func (q *Queries) CreateLoginHistory(ctx context.Context, arg *CreateLoginHistoryParams) error {
	_, err := q.db.Exec(ctx, CreateLoginHistory,
		arg.UserID,
		arg.Username,
		arg.LoginTime,
		arg.LoginStatus,
	)
	return err
}

const GetLastLogin = `-- name: GetLastLogin :one
SELECT login_time
FROM login_histories
WHERE username = $1
ORDER BY login_time DESC
LIMIT 1
`

func (q *Queries) GetLastLogin(ctx context.Context, username pgtype.Text) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, GetLastLogin, username)
	var login_time pgtype.Timestamptz
	err := row.Scan(&login_time)
	return login_time, err
}
